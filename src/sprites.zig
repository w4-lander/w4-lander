const w4 = @import("wasm4.zig");
const utils = @import("utils.zig");

/// Represents a sprite object with information used for blitting.
pub const Sprite = struct {
    width: i32,
    height: i32,
    byteArray: [*]const u8,
};

pub const altitudeSprite = Sprite{
    .width = 28,
    .height = 8,
    .byteArray = &[56]u8{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x10, 0x41, 0x04, 0x00, 0x01, 0x00, 0x41, 0x10, 0x40, 0x04, 0x00, 0x01, 0x04, 0x55, 0x11, 0x51, 0x15, 0x11, 0x15, 0x11, 0x41, 0x10, 0x41, 0x04, 0x11, 0x11, 0x14, 0x41, 0x10, 0x51, 0x05, 0x15, 0x15, 0x15 },
};

pub const fuelSprite = Sprite{
    .width = 16,
    .height = 8,
    .byteArray = &[32]u8{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x40, 0x40, 0x00, 0x10, 0x40, 0x54, 0x44, 0x44, 0x40, 0x40, 0x44, 0x50, 0x40, 0x40, 0x54, 0x54, 0x40 },
};

// Ex. Sprite representation: letter 'b'
// How it's stored as a byte array
// x|_|_|_|
// x|_|_|_|
// x|x|x|_|
// x|_|x|_|
// x|x|x|_|
// _|_|_|_|
// _|_|_|_|
//
// Note how the width has to be divisible by 4.
// We only care about the first three columns though, so we will call w4.blitSub() to extract the desired grid of pixels

// struct for character sprite. Attributes are closely related to parameters in w4.blitSub()
// See here: https://wasm4.org/docs/reference/functions#blitsub-spriteptr-x-y-width-height-srcx-srcy-stride-flags
pub const CharSprite = struct {
    byteArray: [*]const u8,
    width: i32 = 3, // width of character, a.k.a. the columns of the byteArray that we actually care about
    height: i32 = 7,
    stride: i32 = 4,
};

// TODO: include capital letters as well
pub const charSpriteArray = [_]CharSprite{
    CharSprite{ // '0'
        .byteArray = &[7]u8{ 0x54, 0x44, 0x44, 0x44, 0x54, 0x00, 0x00 },
    },
    CharSprite{ // '1'
        .byteArray = &[7]u8{ 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00 },
    },
    CharSprite{ // '2'
        .byteArray = &[7]u8{ 0x54, 0x04, 0x54, 0x40, 0x54, 0x00, 0x00 },
    },
    CharSprite{ // '3'
        .byteArray = &[7]u8{ 0x54, 0x04, 0x54, 0x04, 0x54, 0x00, 0x00 },
    },
    CharSprite{ // '4'
        .byteArray = &[7]u8{ 0x44, 0x44, 0x54, 0x04, 0x04, 0x00, 0x00 },
    },
    CharSprite{ // '5'
        .byteArray = &[7]u8{ 0x54, 0x40, 0x54, 0x04, 0x54, 0x00, 0x00 },
    },
    CharSprite{ // '6'
        .byteArray = &[7]u8{ 0x54, 0x40, 0x54, 0x44, 0x54, 0x00, 0x00 },
    },
    CharSprite{ // '7'
        .byteArray = &[7]u8{ 0x54, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00 },
    },
    CharSprite{ // '8'
        .byteArray = &[7]u8{ 0x54, 0x44, 0x54, 0x44, 0x54, 0x00, 0x00 },
    },
    CharSprite{ // '9'
        .byteArray = &[7]u8{ 0x54, 0x44, 0x54, 0x04, 0x54, 0x00, 0x00 },
    },
    CharSprite{ // 'a'
        .byteArray = &[7]u8{ 0x00, 0x00, 0x14, 0x44, 0x51, 0x00, 0x00 },
        .width = 4,
    },
    CharSprite{ // 'b'
        .byteArray = &[7]u8{ 0x40, 0x40, 0x54, 0x44, 0x54, 0x00, 0x00 },
    },
    CharSprite{ // 'c'
        .byteArray = &[7]u8{ 0x00, 0x00, 0x14, 0x40, 0x14, 0x00, 0x00 },
    },
    CharSprite{ // 'd'
        .byteArray = &[7]u8{ 0x04, 0x04, 0x54, 0x44, 0x54, 0x00, 0x00 },
    },
    CharSprite{ // 'e'
        .byteArray = &[7]u8{ 0x00, 0x10, 0x44, 0x50, 0x14, 0x00, 0x00 },
    },
    CharSprite{ // 'f'
        .byteArray = &[7]u8{ 0x14, 0x10, 0x54, 0x10, 0x10, 0x00, 0x00 },
    },
    CharSprite{ // 'g'
        .byteArray = &[7]u8{ 0x00, 0x00, 0x54, 0x44, 0x54, 0x04, 0x50 },
    },
    CharSprite{ // 'h'
        .byteArray = &[7]u8{ 0x40, 0x40, 0x54, 0x44, 0x44, 0x00, 0x00 },
    },
    CharSprite{ // 'i'
        .byteArray = &[7]u8{ 0x40, 0x00, 0x40, 0x40, 0x40, 0x00, 0x00 },
        .width = 1,
    },
    CharSprite{ // 'j'
        .byteArray = &[7]u8{ 0x10, 0x00, 0x10, 0x10, 0x10, 0x10, 0x40 },
        .width = 2,
    },
    CharSprite{ // 'k'
        .byteArray = &[7]u8{ 0x40, 0x40, 0x44, 0x50, 0x44, 0x00, 0x00 },
    },
    CharSprite{ // 'l'
        .byteArray = &[7]u8{ 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00 },
        .width = 1,
    },
    CharSprite{ // 'm'
        .byteArray = &[14]u8{ 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x44, 0x40, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00 },
        .width = 5,
        .stride = 8,
    },
    CharSprite{ // 'n'
        .byteArray = &[7]u8{ 0x00, 0x00, 0x50, 0x44, 0x44, 0x00, 0x00 },
    },
    CharSprite{ // 'o'
        .byteArray = &[7]u8{ 0x00, 0x00, 0x54, 0x44, 0x14, 0x00, 0x00 },
    },
    CharSprite{ // 'p'
        .byteArray = &[7]u8{ 0x00, 0x00, 0x54, 0x44, 0x54, 0x40, 0x40 },
    },
    CharSprite{ // 'q'
        .byteArray = &[7]u8{ 0x00, 0x00, 0x54, 0x44, 0x54, 0x04, 0x04 },
    },
    CharSprite{ // 'r'
        .byteArray = &[7]u8{ 0x00, 0x00, 0x44, 0x50, 0x40, 0x00, 0x00 },
    },
    CharSprite{ // 's'
        .byteArray = &[7]u8{ 0x00, 0x14, 0x40, 0x14, 0x50, 0x00, 0x00 },
    },
    CharSprite{ // 't'
        .byteArray = &[7]u8{ 0x10, 0x10, 0x54, 0x10, 0x10, 0x00, 0x00 },
    },
    CharSprite{ // 'u'
        .byteArray = &[7]u8{ 0x00, 0x00, 0x44, 0x44, 0x14, 0x00, 0x00 },
    },
    CharSprite{ // 'v'
        .byteArray = &[7]u8{ 0x00, 0x00, 0x44, 0x44, 0x10, 0x00, 0x00 },
    },
    CharSprite{ // 'w'
        .byteArray = &[14]u8{ 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x44, 0x40, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 },
        .width = 5,
        .stride = 8,
    },
    CharSprite{ // 'x'
        .byteArray = &[7]u8{ 0x00, 0x00, 0x44, 0x10, 0x44, 0x00, 0x00 },
    },
    CharSprite{ // 'y'
        .byteArray = &[7]u8{ 0x00, 0x00, 0x44, 0x44, 0x54, 0x04, 0x10 },
    },
    CharSprite{ // 'z'
        .byteArray = &[7]u8{ 0x00, 0x54, 0x04, 0x10, 0x54, 0x00, 0x00 },
    },
};
